======================================
Deployment Buildout-Recipe and Scripts
======================================

Motivation
==========

...

Overview
========

``bda.recipe.deployment`` offers a deployment cycle for python projects.

The deployment cycle consists of three possible installations, further called
environments:

*Development*
    The development environment is used to develop features ...

*Release Candidate*

*Live*


Installation
============

NOTES ON .pypirc:

Make sure that ```repository: https://pypi.python.org/pypi`` is set for pypi
server, even if default. Otherwise releases to pypi will fail. 


OUTDATED

Integrated buildouts with release cycles. Development in subversion, release
candidate as branch in subversion, release against public or own egg-server 
(Package Index).

Overview
--------

Overall process: 

1) Developer uses ``dev.cfg``. If changes were done 
``./bin/deploycandidate MODULENAME NEWVERSION`` is called. Modules RC-branch is
synced and the sources section file for rc environment is modified and committed.

2) Release Manager uses ``rc.cfg`` on its testing checkout. After svn up and 
buildout (re-)run the setup contains all release candidates. The software can be 
tested.

3) Release Manager decides to release a module after testing for live-usage. 
In rc-environment ``./bin/deployrelease MODULENAME `` is called and the egg is 
uploaded to the configured eggserver. The live-versions section file is 
modifed and committed. 

4) Live-System-Administrator uses ``live.cfg`` on the live-deployment maschine.
After svn up and buildout (re-)run the most recent releases are available. 

Proposed buildout structure::

    dev.cfg
    rc.cfg
    live.cfg
    cfg/base.cfg
    cfg/deployment.cfg
    cfg/dev-sources.cfg
    cfg/global-versions.cfg (optional)
    cfg/rc-sources.cfg (generated)
    cfg/live-versions.cfg (generated)
    
dev.cfg
    Contains parts for local development, includes developer tools if 
    neccessary. Includes base, global-versions, dev-sources, deployment.    
    
rc.cfg 
    Contains parts for deployment on a test-server. Includes  base, 
    global-versions, rc-sources, deployment.
    
live.cfg        
    Contains parts for deployment on a live-server. Includes  base,
    global-versions, live-versions.
    
base.cfg 
    contains all common parts of the buildout needed all three types of 
    environment.
    
deployment.cfg  
    Contains deployment specific parts, such as parameters for deployment and
    list of managed packages and which dist-server to use.
    
dev-sources.cfg
    Contains the sources-section for all developer controlled sources.
    
global-versions.cfg
    Contains the common version section. In smaller projects this can be put in 
    base.cfg
    
rc-sources.cfg
    Contains the sources for Release-Candidate setup. This file is generated by 
    scripts. 

live-versions.cfg
    Contains the versions of developer controlled sources used in 
    live-deployment. This file is generated by scripts. 

Funktionen
----------

* Mergen einzelner Resourcen in den "rc" branch

* Taggen eines "rc" branches

* Releasen eines "rc" branches

* Generieren "version.txt" für live Umgebung


Konfiguration
-------------

Erfolgt über buildout
:::::::::::::::::::::

    recipe=bda.recipe.deployment
    distserver =
        bda https://dists.bluedynamice.eu/eggs
        pypi https://pypi.python.org/pypi
    
    packages =
        bda.xyz bda
        cornerstone.xyz pypi


Release script
--------------

* erstellt einen tag im repository (nur svn) mit version nummer als name

* release auf distserver mit name (aus config)

* modifikation versions.txt


Merge Script
------------

* merge einer resource oder eines resource directories nach "rc" branch. 
  der branch wird erwartet in "repository_base/rc" (neben trunk)
  
  
Anwendung
=========

Dev-Env
-------

* Manuell Version anpassen: ./bin/version PACKAGENAME VERSIONNUMBER

* commit package

* ./bin/deployment/exportrcsources PACKAGENAME

einmal: XXX TODO: ./bin/deployment/creatercbranch PACKAGENAME

Convinience:

    ./bin/deployrc PACKAGENAME VERSIONNUMBER
    
    - Version anpassen
    - commit package
    - create branch if not exist
    - export rc sources
    - commit rc sources

    
RC-Env
------

* Merge Dev zu RC: ./bin/deployment/merge PACKAGENAME [FILENAMES]

-> Testen

* Tag Version: ./bin/deployment/tag PACKAGENAME

* Export Live Versions: ./bin/deployment/exportliveversion PACKAGENAME

* Release: ./bin/deployment/release  PACKAGENAME

* commit live versions

Convinience Release:

    ./bin/deployrelease
    
    - tag version
    - export live versions
    - release
    - commit
